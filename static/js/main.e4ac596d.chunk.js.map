{"version":3,"sources":["App.js","serviceWorker.js","index.js","beep.wav"],"names":["intervalID","classNames","require","SESSION","BREAK","defaultState","title","document","audio","Audio","beep","TimerControl","props","value","className","onClick","TimerLengthControl","substractClasses","substract","timerLength","addClasses","add","Display","resetClasses","reset","hide","hasChanged","hasStarted","pauseClasses","pause","isRunning","startClasses","start","id","timerType","displayedTimer","resetCountdown","pauseCountdown","beginCountdown","App","clearInterval","setState","setTitle","state","setInterval","timer","play","setSessionLength","e","controlLength","target","setBreakLength","propertyToChange","buttonValue","currentLength","clockify","minutes","Math","floor","seconds","bind","this","sessionLength","breakLength","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.e4ac596d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.scss\";\r\nimport beep from \"./beep.wav\";\r\n\r\nconst classNames = require(\"classnames\");\r\n\r\n// Timer type can be either session or break,\r\n// these values are compared throughout the application\r\n// to display and control their respective data\r\nconst SESSION = { property: \"sessionLength\", type: \"SESSION\" };\r\nconst BREAK = { property: \"breakLength\", type: \"BREAK\" };\r\n\r\nconst defaultState = {\r\n  [SESSION.property]: 25,\r\n  [BREAK.property]: 5,\r\n  timer: 1500,\r\n  timerType: SESSION.type,\r\n  isRunning: false,\r\n  hasStarted: false,\r\n  hasChanged: false\r\n};\r\n\r\nconst title = document.title;\r\nconst audio = new Audio(beep);\r\n\r\nlet intervalID;\r\n\r\nconst TimerControl = props => {\r\n  return (\r\n    <button\r\n      value={props.value}\r\n      className={\"timer__control \" + props.className}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.title}\r\n    </button>\r\n  );\r\n};\r\n\r\nconst TimerLengthControl = props => {\r\n  const substractClasses = classNames({\r\n    \"timer-length__control\": true,\r\n    substract: true,\r\n    \"not-allowed\": props.timerLength <= 1\r\n  });\r\n\r\n  const addClasses = classNames({\r\n    \"timer-length__control\": true,\r\n    add: true,\r\n    \"not-allowed\": props.timerLength >= 60\r\n  });\r\n\r\n  return (\r\n    <div className=\"timer-length\">\r\n      <div>{props.title}:</div>\r\n      <div className=\"timer-length__controls\">\r\n        <button value=\"-\" className={substractClasses} onClick={props.onClick}>\r\n          -\r\n        </button>\r\n        <p className=\"timer-length__value\">{props.timerLength}</p>\r\n        <button value=\"+\" className={addClasses} onClick={props.onClick}>\r\n          +\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Display = props => {\r\n  const resetClasses = classNames({\r\n    reset: true,\r\n    hide: !props.hasChanged && !props.hasStarted\r\n  });\r\n\r\n  const pauseClasses = classNames({\r\n    pause: true,\r\n    hide: !props.isRunning\r\n  });\r\n\r\n  const startClasses = classNames({\r\n    start: true,\r\n    hide: props.hasStarted && props.isRunning\r\n  });\r\n\r\n  return (\r\n    <main id=\"display\">\r\n      <h1 id=\"status\">\r\n        {props.hasStarted\r\n          ? props.timerType === SESSION.type\r\n            ? \"Work time!\"\r\n            : \"Take a break!\"\r\n          : title}\r\n      </h1>\r\n      <div id=\"counter\">{props.displayedTimer}</div>\r\n      <div id=\"timer-controls\">\r\n        <TimerControl\r\n          title=\"RESET\"\r\n          value=\"reset\"\r\n          className={resetClasses}\r\n          onClick={props.resetCountdown}\r\n        />\r\n        <TimerControl\r\n          title=\"PAUSE\"\r\n          value=\"pause\"\r\n          className={pauseClasses}\r\n          onClick={props.pauseCountdown}\r\n        />\r\n        <TimerControl\r\n          title={props.hasStarted ? \"RESUME\" : \"START\"}\r\n          value=\"start\"\r\n          className={startClasses}\r\n          onClick={props.beginCountdown}\r\n        />\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = defaultState;\r\n    this.resetCountdown = this.resetCountdown.bind(this);\r\n    this.pauseCountdown = this.pauseCountdown.bind(this);\r\n    this.beginCountdown = this.beginCountdown.bind(this);\r\n    this.setSessionLength = this.setSessionLength.bind(this);\r\n    this.setBreakLength = this.setBreakLength.bind(this);\r\n    this.controlLength = this.controlLength.bind(this);\r\n    this.clockify = this.clockify.bind(this);\r\n  }\r\n\r\n  resetCountdown = () => {\r\n    clearInterval(intervalID);\r\n    this.setState(defaultState, () => {\r\n      this.setTitle();\r\n    });\r\n  };\r\n\r\n  pauseCountdown = () => {\r\n    clearInterval(intervalID);\r\n    this.setState({ isRunning: false }, () => {\r\n      this.setTitle();\r\n    });\r\n  };\r\n\r\n  beginCountdown = () => {\r\n    if (!this.state.isRunning) {\r\n      this.setState({\r\n        isRunning: true,\r\n        hasStarted: true\r\n      });\r\n\r\n      intervalID = setInterval(() => {\r\n        if (this.state.timer !== 0) {\r\n          this.setState({\r\n            timer: this.state.timer - 1\r\n          });\r\n        } else {\r\n          clearInterval(intervalID);\r\n          this.setState({ isRunning: false });\r\n          audio.play();\r\n\r\n          if (this.state.timerType === SESSION.type) {\r\n            this.setState({\r\n              timerType: BREAK.type,\r\n              timer: this.state[BREAK.property] * 60\r\n            });\r\n          } else if (this.state.timerType === BREAK.type) {\r\n            this.setState({\r\n              timerType: SESSION.type,\r\n              timer: this.state[SESSION.property] * 60\r\n            });\r\n          }\r\n\r\n          this.beginCountdown();\r\n        }\r\n\r\n        this.setTitle();\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  setSessionLength = e => {\r\n    this.controlLength(\r\n      SESSION.property,\r\n      e.target.value,\r\n      this.state[SESSION.property],\r\n      SESSION.type\r\n    );\r\n  };\r\n\r\n  setBreakLength = e => {\r\n    this.controlLength(\r\n      BREAK.property,\r\n      e.target.value,\r\n      this.state[BREAK.property],\r\n      BREAK.type\r\n    );\r\n  };\r\n\r\n  controlLength = (propertyToChange, buttonValue, currentLength, timerType) => {\r\n    if (this.state.isRunning) return;\r\n    if (timerType === this.state.timerType) {\r\n      if (buttonValue === \"-\" && currentLength !== 1) {\r\n        this.setState({\r\n          [propertyToChange]: currentLength - 1,\r\n          timer: currentLength * 60 - 60\r\n        });\r\n      } else if (buttonValue === \"+\" && currentLength !== 60) {\r\n        this.setState({\r\n          [propertyToChange]: currentLength + 1,\r\n          timer: currentLength * 60 + 60\r\n        });\r\n      }\r\n    } else {\r\n      if (buttonValue === \"-\" && currentLength !== 1) {\r\n        this.setState({\r\n          [propertyToChange]: currentLength - 1\r\n        });\r\n      } else if (buttonValue === \"+\" && currentLength !== 60) {\r\n        this.setState({\r\n          [propertyToChange]: currentLength + 1\r\n        });\r\n      }\r\n    }\r\n    this.setState({ hasChanged: true });\r\n  };\r\n\r\n  setTitle = () => {\r\n    if (this.state.hasStarted) {\r\n      document.title = `${\r\n        this.state.isRunning ? this.state.timerType : \"PAUSED\"\r\n      } (${this.clockify(this.state.timer)}) - ${title}`;\r\n    } else {\r\n      document.title = title;\r\n    }\r\n  };\r\n\r\n  clockify = () => {\r\n    let minutes = Math.floor(this.state.timer / 60);\r\n    let seconds = this.state.timer - minutes * 60;\r\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\r\n    return `${minutes}:${seconds}`;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"page-wrapper\">\r\n        <Display\r\n          timerType={this.state.timerType}\r\n          displayedTimer={this.clockify(this.state.timer)}\r\n          resetCountdown={this.resetCountdown}\r\n          pauseCountdown={this.pauseCountdown}\r\n          beginCountdown={this.beginCountdown}\r\n          hasChanged={this.state.hasChanged}\r\n          isRunning={this.state.isRunning}\r\n          hasStarted={this.state.hasStarted}\r\n        />\r\n        <div id=\"timer-length-settings\">\r\n          <TimerLengthControl\r\n            title=\"Session length\"\r\n            onClick={this.setSessionLength}\r\n            timerLength={this.state.sessionLength}\r\n          />\r\n          <TimerLengthControl\r\n            title=\"Break length\"\r\n            onClick={this.setBreakLength}\r\n            timerLength={this.state.breakLength}\r\n          />\r\n        </div>\r\n        <footer id=\"author\">\r\n          <span>\r\n            by <a href=\"https://edkerforne.github.io/\">Edwin Kerforne</a>\r\n          </span>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/beep.8037aba1.wav\";"],"sourceRoot":""}